#pragma once

#include <math.h>
#include <algorithm>

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

static const float srgb_to_linear_table[] = {
    0,
    0.000303527,
    0.000607054,
    0.000910581,
    0.00121411,
    0.00151763,
    0.00182116,
    0.00212469,
    0.00242822,
    0.00273174,
    0.00303527,
    0.00334653,
    0.00367651,
    0.00402472,
    0.00439144,
    0.00477695,
    0.00518152,
    0.00560539,
    0.00604883,
    0.00651209,
    0.00699541,
    0.00749903,
    0.00802319,
    0.00856812,
    0.00913406,
    0.00972122,
    0.0103298,
    0.0109601,
    0.0116122,
    0.0122865,
    0.012983,
    0.0137021,
    0.0144438,
    0.0152085,
    0.0159963,
    0.0168074,
    0.017642,
    0.0185002,
    0.0193824,
    0.0202886,
    0.021219,
    0.0221739,
    0.0231534,
    0.0241576,
    0.0251869,
    0.0262412,
    0.0273209,
    0.028426,
    0.0295568,
    0.0307134,
    0.031896,
    0.0331048,
    0.0343398,
    0.0356013,
    0.0368894,
    0.0382044,
    0.0395462,
    0.0409152,
    0.0423114,
    0.043735,
    0.0451862,
    0.0466651,
    0.0481718,
    0.0497066,
    0.0512695,
    0.0528606,
    0.0544803,
    0.0561285,
    0.0578054,
    0.0595112,
    0.0612461,
    0.06301,
    0.0648033,
    0.0666259,
    0.0684782,
    0.0703601,
    0.0722718,
    0.0742136,
    0.0761854,
    0.0781874,
    0.0802198,
    0.0822827,
    0.0843762,
    0.0865005,
    0.0886556,
    0.0908417,
    0.093059,
    0.0953075,
    0.0975873,
    0.0998987,
    0.102242,
    0.104616,
    0.107023,
    0.109462,
    0.111932,
    0.114435,
    0.116971,
    0.119538,
    0.122139,
    0.124772,
    0.127438,
    0.130136,
    0.132868,
    0.135633,
    0.138432,
    0.141263,
    0.144128,
    0.147027,
    0.14996,
    0.152926,
    0.155926,
    0.158961,
    0.162029,
    0.165132,
    0.168269,
    0.171441,
    0.174647,
    0.177888,
    0.181164,
    0.184475,
    0.187821,
    0.191202,
    0.194618,
    0.198069,
    0.201556,
    0.205079,
    0.208637,
    0.212231,
    0.215861,
    0.219526,
    0.223228,
    0.226966,
    0.23074,
    0.234551,
    0.238398,
    0.242281,
    0.246201,
    0.250158,
    0.254152,
    0.258183,
    0.262251,
    0.266356,
    0.270498,
    0.274677,
    0.278894,
    0.283149,
    0.287441,
    0.291771,
    0.296138,
    0.300544,
    0.304987,
    0.309469,
    0.313989,
    0.318547,
    0.323143,
    0.327778,
    0.332452,
    0.337164,
    0.341914,
    0.346704,
    0.351533,
    0.3564,
    0.361307,
    0.366253,
    0.371238,
    0.376262,
    0.381326,
    0.386429,
    0.391572,
    0.396755,
    0.401978,
    0.40724,
    0.412543,
    0.417885,
    0.423268,
    0.42869,
    0.434154,
    0.439657,
    0.445201,
    0.450786,
    0.456411,
    0.462077,
    0.467784,
    0.473532,
    0.47932,
    0.48515,
    0.491021,
    0.496933,
    0.502886,
    0.508881,
    0.514918,
    0.520996,
    0.527115,
    0.533276,
    0.539479,
    0.545724,
    0.552011,
    0.55834,
    0.564712,
    0.571125,
    0.57758,
    0.584078,
    0.590619,
    0.597202,
    0.603827,
    0.610496,
    0.617207,
    0.62396,
    0.630757,
    0.637597,
    0.64448,
    0.651406,
    0.658375,
    0.665387,
    0.672443,
    0.679543,
    0.686685,
    0.693872,
    0.701102,
    0.708376,
    0.715694,
    0.723055,
    0.730461,
    0.73791,
    0.745404,
    0.752942,
    0.760525,
    0.768151,
    0.775822,
    0.783538,
    0.791298,
    0.799103,
    0.806952,
    0.814847,
    0.822786,
    0.83077,
    0.838799,
    0.846873,
    0.854993,
    0.863157,
    0.871367,
    0.879622,
    0.887923,
    0.896269,
    0.904661,
    0.913099,
    0.921582,
    0.930111,
    0.938686,
    0.947307,
    0.955973,
    0.964686,
    0.973445,
    0.982251,
    0.991102,
    1,
};

static inline int linearTosRGB(float value)
{
    float v = fmaxf(0, fminf(1, value));
    if (v <= 0.0031308)
        return v * 12.92 * 255 + 0.5;
    else
        return (1.055 * powf(v, 1 / 2.4) - 0.055) * 255 + 0.5;
}

static inline float sRGBToLinear(int value)
{
    return srgb_to_linear_table[value];
}

static inline float sRGBToLinearValue(int value)
{
    float v = (float)value / 255;
    if (v <= 0.04045)
        return v / 12.92;
    else
        return powf((v + 0.055) / 1.055, 2.4);
}

static inline float signPow(float value, float exp)
{
    return copysignf(powf(fabsf(value), exp), value);
}

struct Factor
{
    float r, g, b;

    inline float max() const
    {
        return std::max({r, g, b});
    }

    bool operator<(const Factor &o) const
    {
        return max() < o.max();
    }
};